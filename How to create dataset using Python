from pandas import DataFrame
import pandas as pd
import os

path = "C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\생활이동_행정동_202207/"
list_dir = os.listdir(path)
list_dir

first_data = pd.read_csv(path + list_dir[0], engine="python", encoding="CP949")
for i in list_dir[1:]:
    try:
        temp_data = pd.read_csv(path + i, engine="python", encoding="utf_8_sig")
    except:
        temp_data = pd.read_csv(path + i, engine="python", encoding="CP949")
    first_data = first_data.append(temp_data)
    print(i)
    
first_data.info(memory_usage='deep')

first_data = first_data.replace(to_replace={'*':'0'})

first_data.columns = ['year_month', 'day', 'arrival_time', 'origin_code', 'destination_code', 'sex', 'age', 'travel_type', 'average_time', 'number_travelers' ]

first_data['day'] =first_data['day'].replace(to_replace=['월', '화', '수', '목', '금', '토', '일'], value=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat','Sun'])

first_data

for i in first_data.columns[9:]:
    first_data[i] = first_data[i].astype(float)
    print("{} complete".format(i))
first_data.info(memory_usage='deep')

first_data['number_travelers'] = first_data['number_travelers'].round(decimals = 0)
first_data['number_travelers'] = pd.to_numeric(first_data['number_travelers'])

d = {'origin_code': [1101053, 1101054, 1101055, 1101056, 1101057, 1101058, 1101060, 1101061, 1101063, 1101064, 1101067, 1101068, 1101069, 1101070, 1101071, 1101072, 1101073, 1102052, 1102054, 1102055, 1102057, 1102058, 1102059, 1102060, 1102065, 1102067, 1102068, 1102069, 1102070, 1102071, 1102072, 1102073, 1103051, 1103052, 1103053, 1103057, 1103058, 1103059, 1103063, 1103064, 1103065, 1103066, 1103069, 1103070, 1103071, 1103072, 1103073, 1103074, 1104052, 1104054, 1104055, 1104056, 1104057, 1104058, 1104059, 1104062, 1104065, 1104066, 1104067, 1104068, 1104069, 1104070, 1104071, 1104072, 1104073, 1105053, 1105054, 1105055, 1105056, 1105057, 1105058, 1105059, 1105060, 1105061, 1105062, 1105063, 1105064, 1105065, 1105066, 1105067, 1106071, 1106072, 1106073, 1106080, 1106081, 1106082, 1106083, 1106084, 1106086, 1106087, 1106088, 1106089, 1106090, 1106091, 1107052, 1107054, 1107055, 1107057, 1107059, 1107060, 1107061, 1107062, 1107064, 1107065, 1107068, 1107069, 1107070, 1107071, 1107072, 1107073, 1108058, 1108059, 1108060, 1108061, 1108062, 1108063, 1108064, 1108065, 1108066, 1108068, 1108071, 1108072, 1108076, 1108077, 1108078, 1108081, 1108082, 1108083, 1108084, 1108085, 1109060, 1109061, 1109062, 1109063, 1109064, 1109065, 1109069, 1109070, 1109071, 1109072, 1109073, 1109074, 1109075, 1110051, 1110052, 1110053, 1110054, 1110055, 1110056, 1110057, 1110059, 1110060, 1110061, 1110062, 1110063, 1110064, 1110065, 1111051, 1111052, 1111053, 1111056, 1111058, 1111059, 1111060, 1111061, 1111064, 1111065, 1111066, 1111069, 1111072, 1111073, 1111074, 1111076, 1111077, 1111078, 1111079, 1112051, 1112052, 1112055, 1112056, 1112057, 1112058, 1112059, 1112060, 1112065, 1112066, 1112067, 1112068, 1112071, 1112072, 1112073, 1112074, 1113052, 1113062, 1113064, 1113065, 1113066, 1113068, 1113069, 1113070, 1113071, 1113072, 1113073, 1113074, 1113075, 1113076, 1114059, 1114060, 1114061, 1114063, 1114066, 1114068, 1114069, 1114070, 1114071, 1114072, 1114073, 1114074, 1114075, 1114076, 1114077, 1114078, 1115051, 1115052, 1115053, 1115054, 1115057, 1115058, 1115059, 1115060, 1115061, 1115062, 1115063, 1115064, 1115065, 1115066, 1115069, 1115070, 1115071, 1115072, 1116051, 1116052, 1116053, 1116054, 1116055, 1116057, 1116058, 1116059, 1116061, 1116063, 1116064, 1116065, 1116066, 1116067, 1116069, 1116070, 1116071, 1116072, 1116073, 1116074, 1117051, 1117052, 1117054, 1117055, 1117056, 1117061, 1117062, 1117064, 1117065, 1117067, 1117069, 1117070, 1117071, 1117072, 1117073, 1117074, 1118051, 1118052, 1118053, 1118054, 1118055, 1118057, 1118058, 1118059, 1118060, 1118061, 1119054, 1119055, 1119056, 1119061, 1119062, 1119063, 1119065, 1119066, 1119067, 1119068, 1119069, 1119070, 1119071, 1119072, 1119073, 1119074, 1119075, 1119076, 1120052, 1120053, 1120054, 1120055, 1120056, 1120063, 1120065, 1120066, 1120067, 1120068, 1120069, 1120070, 1120071, 1120072, 1120073, 1121052, 1121054, 1121057, 1121058, 1121061, 1121062, 1121063, 1121064, 1121065, 1121066, 1121068, 1121069, 1121071, 1121072, 1121073, 1121078, 1121079, 1121080, 1121081, 1121082, 1121083, 1122051, 1122052, 1122053, 1122054, 1122055, 1122056, 1122057, 1122058, 1122059, 1122060, 1122061, 1122062, 1122063, 1122064, 1122065, 1122066, 1122067, 1122068, 1123051, 1123052, 1123053, 1123058, 1123059, 1123060, 1123063, 1123064, 1123065, 1123066, 1123067, 1123068, 1123071, 1123072, 1123073, 1123074, 1123075, 1123076, 1123077, 1123078, 1123079, 1123080, 1124051, 1124052, 1124053, 1124054, 1124055, 1124056, 1124057, 1124058, 1124059, 1124060, 1124061, 1124062, 1124063, 1124064, 1124065, 1124066, 1124067, 1124068, 1124069, 1124081, 1124082, 1124071, 1124075, 1124077, 1124078, 1124079, 1124080, 1125075, 1125076, 1125077, 1125053, 1125054, 1125055, 1125056, 1125058, 1125059, 1125061, 1125063, 1125065, 1125066, 1125067, 1125070, 1125071, 1125072, 1125073, 1125074]}
df = pd.DataFrame(d) 
dt = pd.merge(first_data,df, left_on = 'origin_code', right_on = 'origin_code', how = 'inner')
dt

d = {'destination_code': [1101053, 1101054, 1101055, 1101056, 1101057, 1101058, 1101060, 1101061, 1101063, 1101064, 1101067, 1101068, 1101069, 1101070, 1101071, 1101072, 1101073, 1102052, 1102054, 1102055, 1102057, 1102058, 1102059, 1102060, 1102065, 1102067, 1102068, 1102069, 1102070, 1102071, 1102072, 1102073, 1103051, 1103052, 1103053, 1103057, 1103058, 1103059, 1103063, 1103064, 1103065, 1103066, 1103069, 1103070, 1103071, 1103072, 1103073, 1103074, 1104052, 1104054, 1104055, 1104056, 1104057, 1104058, 1104059, 1104062, 1104065, 1104066, 1104067, 1104068, 1104069, 1104070, 1104071, 1104072, 1104073, 1105053, 1105054, 1105055, 1105056, 1105057, 1105058, 1105059, 1105060, 1105061, 1105062, 1105063, 1105064, 1105065, 1105066, 1105067, 1106071, 1106072, 1106073, 1106080, 1106081, 1106082, 1106083, 1106084, 1106086, 1106087, 1106088, 1106089, 1106090, 1106091, 1107052, 1107054, 1107055, 1107057, 1107059, 1107060, 1107061, 1107062, 1107064, 1107065, 1107068, 1107069, 1107070, 1107071, 1107072, 1107073, 1108058, 1108059, 1108060, 1108061, 1108062, 1108063, 1108064, 1108065, 1108066, 1108068, 1108071, 1108072, 1108076, 1108077, 1108078, 1108081, 1108082, 1108083, 1108084, 1108085, 1109060, 1109061, 1109062, 1109063, 1109064, 1109065, 1109069, 1109070, 1109071, 1109072, 1109073, 1109074, 1109075, 1110051, 1110052, 1110053, 1110054, 1110055, 1110056, 1110057, 1110059, 1110060, 1110061, 1110062, 1110063, 1110064, 1110065, 1111051, 1111052, 1111053, 1111056, 1111058, 1111059, 1111060, 1111061, 1111064, 1111065, 1111066, 1111069, 1111072, 1111073, 1111074, 1111076, 1111077, 1111078, 1111079, 1112051, 1112052, 1112055, 1112056, 1112057, 1112058, 1112059, 1112060, 1112065, 1112066, 1112067, 1112068, 1112071, 1112072, 1112073, 1112074, 1113052, 1113062, 1113064, 1113065, 1113066, 1113068, 1113069, 1113070, 1113071, 1113072, 1113073, 1113074, 1113075, 1113076, 1114059, 1114060, 1114061, 1114063, 1114066, 1114068, 1114069, 1114070, 1114071, 1114072, 1114073, 1114074, 1114075, 1114076, 1114077, 1114078, 1115051, 1115052, 1115053, 1115054, 1115057, 1115058, 1115059, 1115060, 1115061, 1115062, 1115063, 1115064, 1115065, 1115066, 1115069, 1115070, 1115071, 1115072, 1116051, 1116052, 1116053, 1116054, 1116055, 1116057, 1116058, 1116059, 1116061, 1116063, 1116064, 1116065, 1116066, 1116067, 1116069, 1116070, 1116071, 1116072, 1116073, 1116074, 1117051, 1117052, 1117054, 1117055, 1117056, 1117061, 1117062, 1117064, 1117065, 1117067, 1117069, 1117070, 1117071, 1117072, 1117073, 1117074, 1118051, 1118052, 1118053, 1118054, 1118055, 1118057, 1118058, 1118059, 1118060, 1118061, 1119054, 1119055, 1119056, 1119061, 1119062, 1119063, 1119065, 1119066, 1119067, 1119068, 1119069, 1119070, 1119071, 1119072, 1119073, 1119074, 1119075, 1119076, 1120052, 1120053, 1120054, 1120055, 1120056, 1120063, 1120065, 1120066, 1120067, 1120068, 1120069, 1120070, 1120071, 1120072, 1120073, 1121052, 1121054, 1121057, 1121058, 1121061, 1121062, 1121063, 1121064, 1121065, 1121066, 1121068, 1121069, 1121071, 1121072, 1121073, 1121078, 1121079, 1121080, 1121081, 1121082, 1121083, 1122051, 1122052, 1122053, 1122054, 1122055, 1122056, 1122057, 1122058, 1122059, 1122060, 1122061, 1122062, 1122063, 1122064, 1122065, 1122066, 1122067, 1122068, 1123051, 1123052, 1123053, 1123058, 1123059, 1123060, 1123063, 1123064, 1123065, 1123066, 1123067, 1123068, 1123071, 1123072, 1123073, 1123074, 1123075, 1123076, 1123077, 1123078, 1123079, 1123080, 1124051, 1124052, 1124053, 1124054, 1124055, 1124056, 1124057, 1124058, 1124059, 1124060, 1124061, 1124062, 1124063, 1124064, 1124065, 1124066, 1124067, 1124068, 1124069, 1124081, 1124082, 1124071, 1124075, 1124077, 1124078, 1124079, 1124080, 1125075, 1125076, 1125077, 1125053, 1125054, 1125055, 1125056, 1125058, 1125059, 1125061, 1125063, 1125065, 1125066, 1125067, 1125070, 1125071, 1125072, 1125073, 1125074]}
df1 = pd.DataFrame(d) 
dt = pd.merge(dt,df1, left_on = 'destination_code', right_on = 'destination_code', how = 'inner')
dt

d = {'age': [25,30,35,40,45,50,55,60]}
dft = pd.DataFrame(d) 
dt = pd.merge(dt,dft, left_on = 'age', right_on = 'age', how = 'inner')
dt

generation = []
for row in dt['age']:
    if row == 25:
        generation.append(1)
    elif row == 30:
        generation.append(1)
    elif row == 35:
        generation.append(1)
    elif row == 40:
        generation.append(1)
    elif row == 45:
        generation.append(0)
    elif row == 50:
        generation.append(0)
    elif row == 55:
        generation.append(0)
    else:
        generation.append(0)
dt['genmz']=generation

commuting = []
for row in dt['travel_type']:
    if row == 'HW':
        commuting.append(1)
    elif row == 'WH':
        commuting.append(1)
    elif row == 'HE':
        commuting.append(0)
    elif row == 'EH':
        commuting.append(0)
    elif row == 'EW':
        commuting.append(0)
    elif row == 'WE':
        commuting.append(0)
    elif row == 'EE':
        commuting.append(0)
    elif row == 'HH':
        commuting.append(0)
    elif row == 'WW':
        commuting.append(0)
    else:
        generation.append(0)
dt['commute']=commuting

weekdays = []
for row in dt['day']:
    if row == 'Mon':
        weekdays.append(1)
    elif row == 'Tue':
        weekdays.append(1)
    elif row == 'Wed':
        weekdays.append(1)
    elif row == 'Thu':
        weekdays.append(1)
    elif row == 'Fri':
        weekdays.append(1)
    elif row == 'Sat':
        weekdays.append(0)
    elif row == 'Sun':
        weekdays.append(0)
    else:
        weekdays.append(0)
dt['days']= weekdays

df = dt.sample(frac=0.001, axis =0)

data = df.groupby(['year_month', 'day', 'arrival_time', 'origin_code', 'destination_code', 'sex', 'age', 'travel_type', 'average_time','genmz','commute','days']).apply(lambda x: pd.Series(range(x['number_travelers'].squeeze()))).reset_index()
data= df.groupby(['year_month', 'day', 'arrival_time', 'origin_code', 'destination_code', 'sex', 'age', 'travel_type', 'average_time','genmz','commute','days']).apply(lambda x: pd.Series(range(x['number_travelers'].squeeze()))).reset_index()[['year_month', 'day', 'arrival_time', 'origin_code', 'destination_code', 'sex', 'age', 'travel_type', 'average_time','genmz','commute','days']]

dt1 = pd.read_csv("C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\\landuse_destination.csv", engine="python", encoding="CP949")
merge1 = pd.merge(data,dt1, left_on = 'destination_code', right_on = 'amdcd', how = 'inner')
dt2 = pd.read_csv("C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\\landuse_origin.csv", engine="python", encoding="CP949")
merge2 = pd.merge(merge1,dt2, left_on = 'origin_code', right_on = 'amdcd', how = 'inner')
dt3 = pd.read_csv("C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\\transit_pivot_weekend.csv", engine="python", encoding="CP949")
merge3 = pd.merge(merge2,dt3, left_on = ['origin_code', 'destination_code'], right_on = ['origin_code', 'destination_code'], how = 'inner')
dt4 = pd.read_csv("C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\lum_o.csv", engine="python", encoding="CP949")
merge4 = pd.merge(mg,dt4, left_on = 'origin_code', right_on = 'amdcd_o', how = 'inner')
dt5 = pd.read_csv("C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\lum_d.csv", engine="python", encoding="CP949")
merge5 = pd.merge(merge4,dt5, left_on = 'destination_code', right_on = 'amdcd_d', how = 'inner')
merge5 = merge5.drop(['amdcd_x', 'amdcd_y'], axis = 1)

path = 'C:\\Users\\ohdaw\\Dropbox\\GSD\\seoulmobility\\variable\\dataset/'
merge5.to_csv(path + "var_221012_12.csv", encoding="CP949")
